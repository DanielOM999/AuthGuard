<html><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Document</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

    :root {
        --primary-color: #6C63FF;
        --secondary-color: #4CAF50;
        --accent-color: #6b6eff;
        --background-color: #1a272e;
        --text-color: #FFFFFF;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        background-color: black;
    }

    .container2{
        height: 300px;
        width: 300px;
        position: absolute;
        top: 50%;
        left: 50%;
        margin: -150px 0 0 -150px;
        transform: scale(1.5);
    }

    .square{
        height: 94%;
        width: 94%;
        background: white;
        position: absolute;
        top: 50%;
        left: 50%;
        margin: -47% 0 0 -47%;
    }

    .black{ 
        background: black;  
        animation: rotate 10s infinite linear; 
    }

    header {
        width: 100%;
        padding: 20px;
        text-align: center;
        background-color: rgba(108, 99, 255, 0.1);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.18);
        opacity: 0;
    }

    h1 {
        font-size: 2.5rem;
        color: var(--text-color);
        text-transform: uppercase;
        letter-spacing: 2px;
        margin: 0;
    }

    nav {
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }

    nav a {
        color: var(--text-color);
        text-decoration: none;
        margin: 0 15px;
        font-size: 1.2rem;
        transition: color 0.3s ease;
    }

    nav a:hover {
        color: var(--accent-color);
    }

    .Hlink {
        color: var(--text-color);
        margin: 0 15px;
        font-size: 1.2rem;
        background: transparent;
        border: none;
        transition: color 0.3s ease;
    }
    
    .Hlink:hover {
        color: var(--accent-color);
    }

    main {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        max-width: 1200px;
        width: 100%;
        text-align: center;
        opacity: 0;
    }

    .content-box {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);
        border: 1px solid rgba(255, 255, 255, 0.18);
        max-width: 800px;
        width: 100%;
    }

    h2 {
        color: var(--secondary-color);
        font-size: 2rem;
        margin-bottom: 20px;
    }

    p {
        font-size: 1.2rem;
        color: rgba(255, 255, 255, 0.7);
        margin-bottom: 30px;
    }

    .Hbutton {
        border-radius: 50px;
        padding: 12px 20px;
        font-size: 18px;
        background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
        border: none;
        color: var(--text-color);
        font-weight: 600;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .Hbutton:hover {
        background: linear-gradient(45deg, var(--secondary-color), var(--primary-color));
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(108, 99, 255, 0.4);
    }


    footer {
        margin-top: auto;
        padding: 20px;
        text-align: center;
        background-color: rgba(108, 99, 255, 0.1);
        box-shadow: 0 -8px 32px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);
        border-top: 1px solid rgba(255, 255, 255, 0.18);
        width: 100%;
        opacity: 0;
    }

    footer p {
        margin: 0;
        font-size: 1rem;
        color: var(--text-color);
    }

    .background-animation {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        z-index: 0;
    }
    .particle {
        position: absolute;
        border-radius: 50%;
    }

    @keyframes float {
        0% { transform: translateY(0) rotate(0deg); }
        100% { transform: translateY(-100vh) rotate(360deg); }
    }
    @keyframes rotate{
        0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }	
    }
</style>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
</head>
<body>
    <div class="container2"></div>
    <div class="background-animation" id="particles"></div>
    {{{body}}}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function createNestedDivs(depth) {
            function createDiv(className) {
                const div = document.createElement('div');
                div.className = className;
                return div;
            }

            const container = document.querySelector('.container2');
            if (!container) {
                console.error("Container element not found.");
                return;
            }

            let currentElement = container;

            for (let i = 0; i < depth; i++) {
                const newDiv = createDiv('square');
                
                const blackDiv = createDiv('square black');

                newDiv.appendChild(blackDiv);

                currentElement.appendChild(newDiv);

                currentElement = blackDiv;
            }
            setTimeout(function(){
                if (container) {
                    while (container.firstChild) {
                        container.removeChild(container.firstChild);
                    }

                    const timeline = gsap.timeline({ default: { duration: .3 }})
                    timeline
                        .to('body', {
                            duration: 2,
                            backgroundColor: '#1a272e',
                            ease: "power2.inOut"
                        })
                        .to('.background-animation', {
                            opacity: 1,
                            ease: "bounce"
                        }, '>0')
                        .to('header', {
                            opacity: 1,
                            ease: "bounce"
                        }, '>0')
                        .to('main', {
                            opacity: 1,
                            ease: "bounce"
                        }, '>0')
                        .to('footer', {
                            opacity: 1,
                            ease: "bounce"
                        }, '>0')
                }
            }, 2000);
        }
        window.onload = function() {
            createNestedDivs(20);
        }

        function createParticle() {
            const particle = document.createElement('div');
            particle.classList.add('particle');
            
            const size = Math.random() * 5 + 2;
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            
            const x = Math.random() * window.innerWidth;
            particle.style.left = `${x}px`;
            particle.style.top = `${window.innerHeight + 10}px`;

            const hue = Math.random() * 360;
            particle.style.backgroundColor = `hsl(${hue}, 100%, 50%)`;

            const duration = Math.random() * 5 + 5;
            particle.style.animation = `float ${duration}s linear infinite`;

            document.getElementById('particles').appendChild(particle);

            setTimeout(() => {
                particle.remove();
            }, duration * 1000);
        }

        setInterval(createParticle, 200);

        function extractTokenFromCurrentUrl() {
            const currentUrl = window.location.href;
            
            const urlObj = new URL(currentUrl);
            
            const fragment = urlObj.hash.substring(1);
            
            if (!fragment) {
                console.log("No fragment found in the URL.");
                return null;
            }
            
            const params = new URLSearchParams(fragment);
            
            const accessToken = params.get('access_token') || '';
            const tokenType = params.get('token_type') || '';
            const signupType = params.get('type') || '';
            
            return {
                access_token: accessToken,
                token_type: tokenType,
                type: signupType
            };
        }

        const tokens = extractTokenFromCurrentUrl();
        console.log(tokens);
    </script>
</body>

</html>